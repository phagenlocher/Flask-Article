{Title}{_Introduction To Light-CMS}
{Description}{Example article}
{Keywords}{Example, Flask}
{Date}{19/12/2015}
{Author}{Philipp Hagenlocher}
{Filetype}{Light-CMS}
{Type}{Tutorial}

---

* Introduction

This example article shows the functionality of <b>Light-CMS</b>.

** What does it do?

<b>Light-CMS</b> provides a flask-dev with the <em>ScriptLoader</em>. Its
purpose is to dynamically load scripts that you put on your webserver. <b>No
database required.</b> Performance is kept in mind by using caching to store
the parsed scripts in memory. <em>This example page was created by <b>
Light-CMS</b>.</em>

** Key-Features

<ul>
<li><h4>Easy to use</h4></li>
<b>Light-CMS</b> keeps ease of use in mind by having a very straightforward
ScriptLoader object that handles everything from parsing to caching.
<li><h4>Dynamic in the spirit of flask</h4></li>
The reason this project was created to have a <b>dynamic way of creating articles.</b>
This is why you can make changes to your articles, reload your page and see
the result. This is also why you can add any tags you like to your script and
use them however you want! Everything is kept as dynamic as possible.
<li><h4>Automation</h4></li>
Why do tedious task on your own? Let the computer do the work! Things like
<b>creating a table of contents</b> or <b>numbering sections</b> is done
automatically by the ScriptLoader.
</ul>

* How to write scripts

The scripts use their own format which is easy to use. First of you set
certain attributes called <em>tags</em> in your script.
<pre>
{Title}{Example article}
{Description}{Example article}
{Keywords}{Example, Flask}
{Date}{19/12/2015}
{Author}{Philipp Hagenlocher}
</pre>
You can add any tags you like to use them in your template or maybe do something
with them internally!
\\
After that, you can start adding content to your page. You can even use <em>
pure HTML</em>! 

** Sections

<b>Light-CMS</b> provides automatic numbering and automatic creating of
a table of contents. This is done by using <em>sections and subsections</em>.
It looks like this:
<pre>
 * Section

 ** Subsection
</pre>
You can use text between them however you want! The table of content will
automatically link to a reference to that section. This is great when creating
a complex tutorial or even something bigger.
\\\\
Your sections will be titlecased automatically. If you <b>do not want this</b>
you can add a '_' infront of your title like this:
<pre>
 *_ Section

 **_ Subsection
</pre>

** The template

Since you are using flask, you will be using Jinja2 for your templates. It is
pretty easy. The tags you set in this script will be set with the same value
in your Jinja2-template. Let's image you used the following tags:
<pre>
{AdditionalName}{ ... }
{SomeInfo}{ ... }
</pre>
You then can use the following tags in Jinja2:
<pre>
{{ AdditionalName }}
...
{{ SomeInfo }}
</pre>
The values you specified will be inserted into your HTML-template!